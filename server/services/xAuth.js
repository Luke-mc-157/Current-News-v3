import { TwitterApi } from 'twitter-api-v2';
import crypto from 'crypto';

// Your X app's Client ID and Secret from developer portal
const clientId = process.env.X_CLIENT_ID;
const clientSecret = process.env.X_CLIENT_SECRET;

// Determine the correct callback URL based on environment
function getCallbackUrl() {
  // Check for Replit domains first
  if (process.env.REPLIT_DOMAINS) {
    const domains = process.env.REPLIT_DOMAINS.split(',');
    const primaryDomain = domains[0]; // Use the first domain
    return `https://${primaryDomain}/auth/twitter/callback`;
  }
  
  // Fallback to old format
  if (process.env.REPL_SLUG && process.env.REPL_OWNER) {
    return `https://${process.env.REPL_SLUG}.${process.env.REPL_OWNER}.repl.co/auth/twitter/callback`;
  }
  
  // Local development fallback
  return 'http://127.0.0.1:5000/auth/twitter/callback';
}

const callbackUrl = getCallbackUrl();

// In-memory session store for demo (use Redis/DB in production)
const sessions = new Map();

// Base64URL encoding function (RFC 7636 compliant)
function base64URLEncode(str) {
  return str.toString('base64')
    .replace(/\+/g, '-')
    .replace(/\//g, '_')
    .replace(/=/g, '');
}

// PKCE code verifier generation (must be 43-128 characters)
function generateCodeVerifier() {
  return base64URLEncode(crypto.randomBytes(32));
}

// Generate code challenge from verifier using SHA-256
function generateCodeChallenge(verifier) {
  return base64URLEncode(crypto.createHash('sha256').update(verifier).digest());
}

// Step 1: Generate login URL for user
export function getXLoginUrl(state) {
  const client = new TwitterApi({ 
    clientId,
    clientSecret 
  });
  
  // Let twitter-api-v2 handle PKCE generation internally
  const authLink = client.generateOAuth2AuthLink(callbackUrl, {
    scope: 'users.read tweet.read follows.read offline.access', // Space-separated scopes
    state
  });
  
  // Fix the lowercase s256 issue - X API requires uppercase S256
  authLink.url = authLink.url.replace('code_challenge_method=s256', 'code_challenge_method=S256');
  
  console.log('OAuth link generated for state:', state);
  console.log('Fixed URL code_challenge_method to uppercase S256');
  
  // Store the codeVerifier generated by the library
  sessions.set(state, { 
    codeVerifier: authLink.codeVerifier, 
    timestamp: Date.now() 
  });
  
  return authLink;
}

// Step 2: Handle OAuth callback
export async function handleXCallback(code, state) {
  console.log('OAuth callback received for state:', state);

  const sessionData = sessions.get(state);
  if (!sessionData) {
    console.log('Session not found. Available sessions:', Array.from(sessions.keys()));
    throw new Error('Invalid or expired session state');
  }
  
  console.log('Session found, attempting token exchange...');
  
  // Clean up old sessions (basic cleanup)
  const now = Date.now();
  for (const [key, value] of sessions.entries()) {
    if (now - value.timestamp > 600000) { // 10 minutes
      sessions.delete(key);
    }
  }
  
  // Create client with explicit credentials for OAuth token exchange
  const client = new TwitterApi({ 
    clientId,
    clientSecret 
  });
  
  try {
    console.log('Token exchange details:');
    console.log('- Code:', code?.substring(0, 20) + '...');
    console.log('- Code Verifier:', sessionData.codeVerifier?.substring(0, 20) + '...');
    console.log('- Redirect URI:', callbackUrl);
    console.log('- Client ID:', clientId);
    console.log('- Client Secret present:', !!clientSecret);

    // Use the explicit oauth2 token exchange method with debug logging
    console.log('Attempting token exchange with:');
    console.log('- Code length:', code?.length);
    console.log('- Code verifier length:', sessionData.codeVerifier?.length);
    console.log('- Redirect URI:', callbackUrl);
    
    const tokenResponse = await client.loginWithOAuth2({
      code: code,
      codeVerifier: sessionData.codeVerifier,
      redirectUri: callbackUrl,
    });

    console.log('Token response received:', {
      hasAccessToken: !!tokenResponse.accessToken,
      hasRefreshToken: !!tokenResponse.refreshToken,
      expiresIn: tokenResponse.expiresIn
    });

    const { accessToken, refreshToken, expiresIn } = tokenResponse;
    
    console.log('✅ Token exchange successful!');
    console.log('- Access token length:', accessToken?.length);
    console.log('- Refresh token length:', refreshToken?.length);
    console.log('- Expires in seconds:', expiresIn);
    
    // Calculate expiration timestamp
    const expiresAt = new Date(Date.now() + (expiresIn * 1000));
    
    // Clean up the session
    sessions.delete(state);
    
    return {
      accessToken,
      refreshToken,
      expiresIn,
      expiresAt,
      success: true
    };
  } catch (error) {
    console.error('❌ X OAuth token exchange failed:');
    console.error('Error code:', error.code);
    console.error('Error data:', error.data);
    console.error('Error headers:', error.headers);
    
    // Debug the credentials being used
    console.log('🔍 Debug info:');
    console.log('- Client ID being used:', clientId);
    console.log('- Client Secret length:', clientSecret?.length);
    console.log('- Callback URL:', callbackUrl);
    
    sessions.delete(state);
    throw new Error('Authentication failed: ' + error.message);
  }
}

// Refresh access token using refresh token
export async function refreshAccessToken(refreshToken) {
  const client = new TwitterApi({ 
    clientId,
    clientSecret 
  });
  try {
    const { accessToken, refreshToken: newRefreshToken, expiresIn } = await client.refreshOAuth2Token(refreshToken);
    return {
      accessToken,
      refreshToken: newRefreshToken,
      expiresIn
    };
  } catch (error) {
    console.error('Token refresh failed:', error);
    throw new Error('Failed to refresh access token. Please re-authenticate.');
  }
}

// Create authenticated client with automatic token refresh
export async function createAuthenticatedClient(accessToken, refreshToken, expiresAt) {
  // Check if expired (add 5 minute buffer for safety)
  if (expiresAt && Date.now() > expiresAt - 300000) {
    if (!refreshToken) {
      throw new Error('No refresh token available. Please re-authenticate.');
    }
    
    console.log('Access token near expiry, refreshing...');
    const refreshed = await refreshAccessToken(refreshToken);
    
    // Note: Caller should update the stored token in database
    console.log('Token refreshed successfully');
    return new TwitterApi(refreshed.accessToken);
  }
  
  return new TwitterApi(accessToken);
}

// Verify if X API credentials are configured
export function isXAuthConfigured() {
  return Boolean(clientId && clientSecret);
}

// Get configuration status
export function getXAuthStatus() {
  return {
    configured: Boolean(clientId && clientSecret),
    clientIdPresent: Boolean(clientId),
    clientSecretPresent: Boolean(clientSecret),
    callbackUrl
  };
}