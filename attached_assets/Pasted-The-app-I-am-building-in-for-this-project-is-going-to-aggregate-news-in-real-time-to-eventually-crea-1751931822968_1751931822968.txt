The app I am building in for this project is going to aggregate news in real time to eventually create  ai generated podcasts for users to listen to at the cadence that works for them. The purpose of the app is to delete the time that it takes for people to find news on social media by giving users the news that they are interested in, and would come across anyway through social media, in an audio format when they want it (i.e. morning commutes). The news to aggregate is whatever information the user cares about, no matter how local or how global. The first versions of the app will be very similar to Google's experimental lab product called "Daily Listen". Google describes the Daily Listen as follows: "An experimental audio show from Discover, made just for you with AI. Each day, you’ll get a quick update on the things you care about and follow, curated from sources across the web. You’ll also get links to related stories so you can easily explore and learn more. This feature is still in early testing, so please share your feedback to help improve and shape the future of the show."

I am starting development of my app by making a proof of concept. My vision for the proof of concept and for the product is for the app to start by scraping X (twitter) for real time posts. The app should then compile the most engaged posts from the last ~24 hours, synthesize factual headlines, and search google news for supporting articles for those headlines. 

For the proof of concept, I want the app to present the user results of headlines with supporting information based on the user's topics of interest. All headlines and supporting information presented in the app's UI must be factual, declarative statements with ZERO opinionated verbiage. Each result will have a dropdown with clickable links to all of the posts that the app compiled to derive each headline next to the headline, and the supporting information will have clickable links to the articles found on google news. The results will be ranked by total engagement on X posts. The user will have the option to generate an audio podcast that can be delivered to their email as an mp3 or mp4 file with different options to select for the cadence of the podcast, the voice used to narrate the podcast (celebrity, ai voice, etc.) and the length of the podcast.

The front end of the app should show a "search bar" that allows a user to type in their topics of interests (to be separated by commas). Once the user eneters 5 or more topics, the button to "Submit" will become clickable. Once clicked, the app will scan X (twitter) + google news to create at least 15 headlines with supporting info on the UI. I will give more instructions on how the app finds and compiles the data for the results shortly

The front end should give also have the option to "Generate Podcast". After clicking on the "Generate Podcast" button, the user will have the option to choose the amount of times the cadence in which they receive the podcast. The options will be 1, 2, or 3 times per day. The user can then select the time of day that they receive the podcast for each options. For example, if the user selects 2 times per day, they can then choose a time (H:MM AM/PM) for the 2 podcasts. This data will prompt the app to run for the user at those times every day. At this stage, the user will need to input their name and email address in order to receive the podcast because the users name will be used in the script and the podcast will be sent to their email as an audio file.

The front end UI must also include the app's name, "Current", in the top left corner.

IMPORTANT: Use UX best practices to create the front end user experience.
